import requests
import json
from requests.auth import HTTPBasicAuth
from pprint import pprint
import sys
from config import API_URL, CAMPUS_TOKYO
from auth_config import UID, SECRET
from get_token import get_token
from datetime import datetime

def get_campus_by_id_direct(access_token, campus_id, exam_ids=None):
    headers = {
        'Authorization': f'Bearer {access_token}'
    }
    url = f"{API_URL}/v2/campus/{campus_id}/exams"
    
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        exams_data = response.json()
        
        # exam_ids が指定されている場合はフィルタリング
        if exam_ids:
            if not isinstance(exam_ids, (list, tuple)):
                exam_ids = [exam_ids]
            exams_data = [exam for exam in exams_data if exam.get("id") in exam_ids]
        
        return response.status_code, exams_data
    else:
        print(f"API request error: {response.status_code}")
        print(response.text)
        return response.status_code, None

if __name__ == "__main__":
    token = get_token()
    if not token:
        sys.exit(1)
   
    # 全データを取得
    status, campus_data = get_campus_by_id_direct(token, CAMPUS_TOKYO, None)
    
    if not campus_data:
        print("データが空です。API リクエストに問題がある可能性があります。")
        sys.exit(1)
  
    for exam in campus_data:
        begin_at_str = exam.get('begin_at')
        exam_date = None
        
        if begin_at_str:
            try:
                exam_date = datetime.strptime(begin_at_str, "%Y-%m-%dT%H:%M:%S.%fZ")
            except ValueError:
                print(f"Could not parse date: {begin_at_str}")
        
        target_date = "2025-05-17T02:00:00.000Z"

        # Print exact string comparison result to debug
        if begin_at_str == target_date:
            print(f"Exam ID: {exam.get('id')}, Name: {exam.get('name')}")
            print(f"Begin at: {begin_at_str}")
            projects = exam.get('projects', [])
            if projects:
                print("Projects:")
                for i, project in enumerate(projects, 1):
                    print(f"  {i}. ID: {project.get('id')}, Name: {project.get('name')}, Slug: {project.get('slug')}")
            else:
                print("  No projects found")
            
            print("-" * 50)
